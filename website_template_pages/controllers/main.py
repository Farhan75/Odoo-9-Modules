# -*- coding: utf-8 -*-
import openerp.http as http
from openerp.http import request
import logging
_logger = logging.getLogger(__name__)
import werkzeug
import base64
import re
import json
import openerp
import unicodedata
from openerp.tools import html_escape as escape, ustr, image_resize_and_sharpen, image_save_for_web
# optional python-slugify import (https://github.com/un33k/python-slugify)
try:
    import slugify as slugify_lib
except ImportError:
    slugify_lib = None
    
class WebsiteTemplatePages(http.Controller):    
    
    @http.route('/template/pages', website=True, type='json', auth="user")
    def website_template_pages_load(self, **kw):
        
        values = {}
	for field_name, field_value in kw.items():
            values[field_name] = field_value
            
        page_templates = request.env['ir.ui.view'].search([('is_webpage_template','=',True)])
        
        html_string = ""
        for page_template in page_templates:
            html_string += "<div class=\"sythil_page_template\" data-template=\"" + str(page_template.id) + "\">\n"
            html_string += "    <img src=\"data:image/jpeg;base64," + str(page_template.image) + "\"/><br/>\n"
            html_string += "    " + page_template.name + "<br/>\n"
            html_string += "    <br/>\n"
            html_string += "</div>\n"
        
        return {'html_string': html_string}

    @http.route('/template/pages/save', website=True, type='json', auth="user")
    def website_template_pages_save(self, **kw):

        values = {}
	for field_name, field_value in kw.items():
            values[field_name] = field_value

        view_id = values['view_id']
        
        current_view = request.env['ir.ui.view'].browse( int( view_id) )
                
        #Create the new template page using the content of the current page
        new_xml_id = request.env['website'].new_page(current_view.name + " - Template", current_view.xml_id)
        
        #We need to modify the new page to classify it as a template
        new_view = request.env['ir.ui.view'].search([('key','=',new_xml_id)])
        new_view.is_webpage_template = True

        #In the future we will generate the image put for now we just use a placeholder
        new_view.image = ""

        return {'code': 'good'}

    @http.route('/template/pages/new', website=True, type='json', auth="user")
    def website_template_pages_new(self, **kw):
        
        values = {}
	for field_name, field_value in kw.items():
            values[field_name] = field_value
        
        page_template = request.env['ir.ui.view'].browse( int(values['template_id']) )
        s = ustr(values['page_name'])
	uni = unicodedata.normalize('NFKD', s).encode('ascii', 'ignore').decode('ascii')
	slug = re.sub('[\W_]', ' ', uni).strip().lower()
        slug = re.sub('[-\s]+', '-', slug)
        page_name = slug
        template_module = "website"
        page_xmlid = "%s.%s" % (template_module, page_name)
        website_id = request.env.context.get('website_id')
        key = template_module + '.' + page_name
        
        #Create a new view with the content of the page template
        page = request.env['ir.ui.view'].create({'website_id': website_id, 'key': key, 'arch': page_template.arch.replace('website_template_pages.placeholder', page_xmlid), 'name': page_name, 'page': True, 'type': 'qweb', 'xml_id': page_xmlid})
        
        return {'page_name': page_name}